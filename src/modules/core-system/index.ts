/**
 * ­ЪЈЃРђЇРЎѓ№ИЈ Marathon MCP Tool - Core System Module
 * ­ЪЄг­ЪЄф рЃФрЃўрЃарЃўрЃЌрЃљрЃЊрЃў рЃАрЃўрЃАрЃбрЃћрЃЏрЃўрЃА рЃЏрЃЮрЃЊрЃБрЃџрЃў
 */

import { MarathonConfig } from '../../config/marathon-config.js';
import { MarathonLogger } from '../../utils/logger.js';

export class CoreSystemModule {
  constructor(
    private config: MarathonConfig,
    private logger: MarathonLogger
  ) {}

  async getTools() {
    return [
      {
        name: 'marathon_test_connection',
        description: '­ЪЈЃРђЇРЎѓ№ИЈ рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃбрЃћрЃАрЃбрЃўрЃарЃћрЃЉрЃљ рЃЊрЃљ рЃАрЃўрЃАрЃбрЃћрЃЏрЃўрЃА рЃАрЃбрЃљрЃбрЃБрЃАрЃў',
        inputSchema: {
          type: 'object',
          properties: {
            message: {
              type: 'string',
              description: 'рЃбрЃћрЃАрЃбрЃўрЃА рЃерЃћрЃбрЃДрЃЮрЃЉрЃўрЃюрЃћрЃЉрЃљ'
            }
          }
        }
      },
      {
        name: 'marathon_get_status',
        description: '­ЪЊі рЃАрЃўрЃАрЃбрЃћрЃЏрЃўрЃА рЃАрЃарЃБрЃџрЃў рЃАрЃбрЃљрЃбрЃБрЃАрЃў',
        inputSchema: {
          type: 'object',
          properties: {}
        }
      }
    ];
  }

  async handleTool(name: string, args: any) {
    switch (name) {
      case 'marathon_test_connection':
        return await this.testConnection(args);
      case 'marathon_get_status':
        return await this.getStatus(args);
      default:
        return null;
    }
  }

  private async testConnection(args: any) {
    const message = args.message || 'Marathon MCP Tool рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃбрЃћрЃАрЃбрЃў';
    
    this.logger.info('­ЪЈЃРђЇРЎѓ№ИЈ рЃЎрЃљрЃЋрЃерЃўрЃарЃўрЃА рЃбрЃћрЃАрЃбрЃўрЃарЃћрЃЉрЃљ...');
    
    return {
      content: [{
        type: 'text',
        text: `РюЁ SUCCESS! Marathon MCP Tool v2.0.0 рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА!

­ЪЄг­ЪЄф рЃЦрЃљрЃарЃЌрЃБрЃџрЃў рЃўрЃюрЃбрЃћрЃарЃцрЃћрЃўрЃАрЃў рЃЕрЃљрЃарЃЌрЃБрЃџрЃўрЃљ
­Ъїі рЃЉрЃљрЃЌрЃБрЃЏрЃБрЃарЃў рЃ«рЃћрЃџрЃгрЃћрЃарЃўрЃЌ рЃерЃћрЃЦрЃЏрЃюрЃўрЃџрЃўрЃљ рЃАрЃўрЃДрЃЋрЃљрЃарЃБрЃџрЃўрЃЌ
­ЪЈћ№ИЈ рЃЎрЃљрЃЋрЃЎрЃљрЃАрЃўрЃЮрЃюрЃўрЃА рЃЏрЃЌрЃћрЃЉрЃўрЃА рЃАрЃўрЃФрЃџрЃўрЃћрЃарЃўрЃЌ

рЃбрЃћрЃАрЃбрЃўрЃА рЃерЃћрЃбрЃДрЃЮрЃЉрЃўрЃюрЃћрЃЉрЃљ: ${message}
рЃЊрЃарЃЮ: ${new Date().toISOString()}

РџА рЃДрЃЋрЃћрЃџрЃљ рЃЏрЃЮрЃЊрЃБрЃџрЃў рЃЏрЃќрЃљрЃЊрЃљрЃљ рЃЏрЃБрЃерЃљрЃЮрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА!
­Ъј» 80+ рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ 7 рЃЎрЃљрЃбрЃћрЃњрЃЮрЃарЃўрЃљрЃерЃў
Рюе Universal Edition рЃЕрЃљрЃарЃЌрЃБрЃџрЃўрЃљ

** рЃДрЃЋрЃћрЃџрЃљрЃцрЃћрЃарЃў рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА! **`
      }]
    };
  }

  private async getStatus(args: any) {
    const systemInfo = this.config.getSystemInfo();
    
    return {
      content: [{
        type: 'text',
        text: `­ЪЈЃРђЇРЎѓ№ИЈ Marathon MCP Tool v${systemInfo.version} рЃАрЃўрЃАрЃбрЃћрЃЏрЃўрЃА рЃАрЃбрЃљрЃбрЃБрЃАрЃў

­ЪЊі рЃАрЃљрЃћрЃарЃЌрЃЮ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ:
- рЃЋрЃћрЃарЃАрЃўрЃљ: ${systemInfo.version}
- рЃарЃћрЃЊрЃљрЃЦрЃфрЃўрЃљ: ${systemInfo.edition}
- рЃћрЃюрЃљ: ${systemInfo.language === 'georgian' ? '­ЪЄг­ЪЄф рЃЦрЃљрЃарЃЌрЃБрЃџрЃў' : '­ЪЄг­ЪЄД English'}
- рЃЌрЃћрЃЏрЃљ: ${systemInfo.theme}

­ЪЊд рЃЏрЃЮрЃЊрЃБрЃџрЃћрЃЉрЃў (${systemInfo.modules_enabled.length}/7):
${systemInfo.modules_enabled.map((m: string) => `  РюЁ ${m}`).join('\n')}

­Ъј» рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃћрЃЉрЃў: ${systemInfo.total_functions}+

${systemInfo.batumi_signature}`
      }]
    };
  }
}